<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>prev_x = x;
prev_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// fix platform and player to screen coordinates to reduce rounding errors
if ((x mod 1) &gt; 0.5) x = ceil(x); else x = floor(x);
if ((y mod 1) &gt; 0.5) y = ceil(y); else y = floor(y);
with(obj_player) {
    if ((x mod 1) &gt; 0.5) x = ceil(x); else x = floor(x);
    if ((y mod 1) &gt; 0.5) y = ceil(y); else y = floor(y);
}

// check if player is riding the platform
var passenger = noone;

// position vector locating passenger relative to platform x,y
var rx;
var ry;

if (place_meeting(x, y-1, obj_player)) {
    passenger = instance_place(x, y-1, obj_player);
    rx = passenger.x - x;
    ry = passenger.y - y;
}

// follow moving platform target
var target = instance_find(obj_moving_platform_target, 0);

// calculate directional vector (d)
dx = target.x - prev_x;
dy = target.y - prev_y;

// calculate unit vector of d
u_mag = sqrt(dx * dx + dy * dy);
ux = dx / u_mag;
uy = dy / u_mag;

// move stepwise by unit vector
while ((abs(target.x - x) &gt;= 1) || (abs(target.y - y) &gt;= 1)) {
    // move
    x += ux;
    y += uy;
        
    // check for collision with player (assuming player was not riding)
    if (passenger == noone) {
        if (place_meeting(x,y,obj_player)) {
            var player = instance_place(x,y, obj_player);
            player.x += ux;
            player.y += uy;
        }
        
        // check for new passenger
        if (place_meeting(x, y-1, obj_player)) {
            passenger = instance_place(x, y-1, obj_player);
            rx = passenger.x - x;
            ry = passenger.y - y;
            
            // stop passenger from moving on its own
            passenger.vsp = 0;
            passenger.hsp = 0;
        }
    }
}

// correct for screen pixels    /* EDIT: DON'T DO THIS, IT MESSES THINGS UP */
//x = floor(x);
//y = floor(y);

// save values as previous
prev_x = x;
prev_y = y;

// if passenger, reposition passenger
if (passenger != noone) {
    passenger.x = x + rx;
    passenger.y = y + ry;
    
    // check for collision, possibly due to rounding error; adjust until no collision
    /*
    if (place_meeting(x,y, obj_player)) {
        var debug = true;
        with (passenger) {
            var platform = instance_place(x, y, obj_moving_platform);
            var pdir = point_direction(platform.x, platform.y, x, y);
            move_outside_solid(pdir, -1);
        }
    }
    */
    /* version 2 */
    /*
    while (place_meeting(x,y, obj_player)) {
            var player = instance_place(x,y, obj_player);
            player.x += ux;
            player.y += uy;
    }
    /* end v2 */
    /* version 3 */
    // the player seems to bounce up and down ~ 1 px (after jumping in place on the platform) if the previous collision adjustment is not in place, so...
    while (place_meeting(x,y, obj_player)) {
            var player = instance_place(x,y, obj_player);
            player.y--;
    }
    /* end v3 */
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
